import{s as o}from"./index-D_r632up.js";const s={async getAllProducts(t=!1){try{console.log("üîÑ Fetching products...",t?"(force refresh)":"");const r=o.from("products").select("*").eq("is_active",!0).order("created_at",{ascending:!1});t&&r.gt("updated_at",new Date(0).toISOString());const{data:e,error:a}=await r;if(a)throw console.error("‚ùå Supabase error fetching products:",a),new Error(`Supabase error: ${a.message}`);return console.log("‚úÖ Products fetched:",e?.length||0),e||[]}catch(r){throw console.error("‚ùå Error fetching products:",r),r}},async getProductById(t){try{const{data:r,error:e}=await o.from("products").select("*").eq("id",t).eq("is_active",!0).single();return e?(console.error("‚ùå Supabase error fetching product:",e),null):r}catch(r){return console.error("‚ùå Error fetching product:",r),null}},async getProductsByCategory(t){try{const{data:r,error:e}=await o.from("products").select("*").eq("category",t).eq("is_active",!0).order("created_at",{ascending:!1});if(e)throw console.error("‚ùå Supabase error fetching products by category:",e),new Error(`Supabase error: ${e.message}`);return r||[]}catch(r){throw console.error("‚ùå Error fetching products by category:",r),r}},async getProductsByMaterial(t){try{const{data:r,error:e}=await o.from("products").select("*").ilike("material",`%${t}%`).eq("is_active",!0).order("created_at",{ascending:!1});if(e)throw console.error("‚ùå Supabase error fetching products by material:",e),new Error(`Supabase error: ${e.message}`);return r||[]}catch(r){throw console.error("‚ùå Error fetching products by material:",r),r}},async searchProducts(t){try{const{data:r,error:e}=await o.from("products").select("*").or(`name.ilike.%${t}%,description.ilike.%${t}%,material.ilike.%${t}%`).eq("is_active",!0).order("created_at",{ascending:!1});if(e)throw console.error("‚ùå Supabase error searching products:",e),new Error(`Supabase error: ${e.message}`);return r||[]}catch(r){throw console.error("‚ùå Error searching products:",r),r}},subscribeToProducts(t){return o.channel("products").on("postgres_changes",{event:"*",schema:"public",table:"products"},t).subscribe()}};export{s as p};
